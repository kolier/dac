<?php

/**
 * @file
 * Install file of Data and Chart.
 */

/**
 * Implements hook_install().
 */
/*
function dac_install() {
  // Create Entity Types: Data, Chart.
  // Create corresponding Field, Field Instance.
  
  // Try load the existing entity type, if one exists.
  $entity_type = EntityType::loadByName('data');
  // Only touch it if not exist.
  if (empty($entity_type->id)) {
    $entity_type = new EntityType();
    $entity_type->name = 'data';
    $entity_type->label = 'Data';
    // Add all default properties.
    $properties_default = eck_get_default_properties();
    foreach ($properties_default as $property_key => $property) {
    	$entity_type->addProperty($property_key, $property['label'], $property['type'], $property['behavior']);
    }
    $entity_type->save();
  }
}
*/

/**
 * Implements hook_field_schema().
 */
function dac_field_schema($field) {
  $schemas = array();
  
  $schemas['dac_chart_type'] = array(
    'columns' => array(
      'value' => array(
        'type' => 'varchar',
        'length' => 255,
        'not null' => FALSE,
      ),
    ),
    'indexes' => array(
      'value' => array('value'),
    ),
  );
  
  $schemas['dac_chart_options'] = array(
    'columns' => array(
      'value' => array(
        'type' => 'blob',
        'size' => 'big',
        'not null' => FALSE,
        'serialize' => TRUE,
      ),
    ),
  );
  
  return $schemas[$field['type']];
}

/**
 * Implements hook_eck_entity_type_info().
 */
/*
function dac_eck_entity_type_info() {
  $items = array(
    'data' => array(
      'name' => 'data',
      'label' => 'Data',
      'properties' => array(
        'title' => array(
          'label' => 'Title',
          'type' => 'text',
          'behavior' => 'title',
        ),
        'uid' => array(
          'label' => 'Author',
          'type' => 'integer',
          'behavior' => 'author',
        ),
        'created' => array(
          'label' => 'Created',
          'type' => 'integer',
          'behavior' => 'created',
        ),
        'changed' => array(
          'label' => 'Changed',
          'type' => 'integer',
          'behavior' => 'changed',
        ),
        'published' => array(
          'label' => 'Published',
          'type' => 'integer',
          'behavior' => 'published',
        ),
        'machine_name' => array(
          'label' => 'Machine Name',
          'type' => 'text',
          'behavior' => 'machine_name',
        ),
      ),
    ),
    'chart' => array(
      'name' => 'chart',
      'label' => 'Chart',
      'properties' => array(
        'title' => array(
          'label' => 'Title',
          'type' => 'text',
          'behavior' => 'title',
        ),
        'uid' => array(
          'label' => 'Author',
          'type' => 'integer',
          'behavior' => 'author',
        ),
        'created' => array(
          'label' => 'Created',
          'type' => 'integer',
          'behavior' => 'created',
        ),
        'changed' => array(
          'label' => 'Changed',
          'type' => 'integer',
          'behavior' => 'changed',
        ),
        'published' => array(
          'label' => 'Published',
          'type' => 'integer',
          'behavior' => 'published',
        ),
        'machine_name' => array(
          'label' => 'Machine Name',
          'type' => 'text',
          'behavior' => 'machine_name',
        ),
      ),
    ),
  );
  return $items;
}
*/

/**
 * Implements hook_eck_bundle_info().
 */
/*
function dac_eck_bundle_info() {
  $items = array(
    'data_sheet' => array(
      'machine_name' => 'data_sheet',
      'entity_type' => 'data',
      'name' => 'sheet',
      'label' => 'Sheet',
    ),
    'chart_gct' => array(
      'machine_name' => 'chart_gct',
      'entity_type' => 'chart',
      'name' => 'gct',
      'label' => 'Google Chart Tools',
    ),
  );
  return $items;
}
*/

/**
 * Implements hook_field_default_fields().
 */
/*
function eck_chart_field_default_fields() {
  $fields = array();

  // Exported field: 'chart-google_chart_tools-field_chart_data'.
  $fields['chart-google_chart_tools-field_chart_data'] = array(
    'field_config' => array(
      'active' => '1',
      'cardinality' => '1',
      'deleted' => '0',
      'entity_types' => array(),
      'field_name' => 'field_chart_data',
      'foreign keys' => array(
        'node' => array(
          'columns' => array(
            'target_id' => 'nid',
          ),
          'table' => 'node',
        ),
      ),
      'indexes' => array(
        'target_id' => array(
          0 => 'target_id',
        ),
      ),
      'locked' => '0',
      'module' => 'entityreference',
      'settings' => array(
        'handler' => 'base',
        'handler_settings' => array(
          'behaviors' => array(
            'views-select-list' => array(
              'status' => 0,
            ),
          ),
          'sort' => array(
            'direction' => 'ASC',
            'field' => 'field_data_sheet:value',
            'property' => 'id',
            'type' => 'none',
          ),
          'target_bundles' => array(),
        ),
        'handler_submit' => 'Change handler',
        'target_type' => 'data',
      ),
      'translatable' => '0',
      'type' => 'entityreference',
    ),
    'field_instance' => array(
    'bundle' => 'google_chart_tools',
    'default_value' => NULL,
    'deleted' => '0',
    'description' => 'Data of this chart.',
    'display' => array(
    'default' => array(
    'label' => 'above',
    'module' => 'entityreference',
    'settings' => array(
    'link' => FALSE,
    ),
    'type' => 'entityreference_label',
    'weight' => 0,
    ),
    'teaser' => array(
    'label' => 'above',
    'settings' => array(),
    'type' => 'hidden',
    'weight' => 0,
    ),
    ),
    'entity_type' => 'chart',
    'field_name' => 'field_chart_data',
    'label' => 'Data Source',
    'required' => 0,
    'settings' => array(
    'user_register_form' => FALSE,
    ),
    'widget' => array(
    'active' => 1,
    'module' => 'entityreference',
    'settings' => array(
    'match_operator' => 'CONTAINS',
    'path' => '',
    'size' => '60',
    ),
    'type' => 'entityreference_autocomplete',
    'weight' => '2',
    ),
    ),
  );

  // Exported field: 'data-sheet-field_data_sheet'.
  $fields['data-sheet-field_data_sheet'] = array(
    'field_config' => array(
      'active' => '1',
      'cardinality' => '1',
      'deleted' => '0',
      'entity_types' => array(),
      'field_name' => 'field_data_sheet',
      'foreign keys' => array(),
      'indexes' => array(
        'name' => array(
          0 => 'name',
        ),
      ),
      'locked' => '0',
      'module' => 'sheetnode',
      'settings' => array(),
      'translatable' => '0',
      'type' => 'sheetfield',
    ),
    'field_instance' => array(
      'bundle' => 'sheet',
      'default_value' => NULL,
      'deleted' => '0',
      'description' => 'Spreadsheet for data input.',
      'display' => array(
        'default' => array(
          'label' => 'above',
          'module' => 'sheetnode',
          'settings' => array(),
          'type' => 'sheetfield_default',
          'weight' => 0,
        ),
        'teaser' => array(
          'label' => 'above',
          'settings' => array(),
          'type' => 'hidden',
          'weight' => 0,
        ),
      ),
      'entity_type' => 'data',
      'field_name' => 'field_data_sheet',
      'label' => 'Sheet',
      'required' => 0,
      'settings' => array(
      'user_register_form' => FALSE,
      ),
      'widget' => array(
      'active' => 0,
      'module' => 'sheetnode',
      'settings' => array(),
      'type' => 'sheetfield_spreadsheet',
      'weight' => '1',
      ),
    ),
  );

  // Translatables
  // Included for use with string extractors like potx.
  t('Data Source');
  t('Data of this chart.');
  t('Sheet');
  t('Spreadsheet for data input.');

  return $fields;
}
*/
