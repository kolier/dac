<?php
/**
 * @file
 * Code for the Data and Chart feature module.
 */

include_once 'dac.features.inc';

/**
 * Implements hook_menu().
 */
function dac_menu() {
  $items = array();

  $items['admin/config/content/dac'] = array(
    'title' => 'Data and Chart',
    'description' => 'Configure Data and Chart components.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('dac_admin_config'),
    'access arguments' => array('administer site configuration'),
    'file' => 'dac.admin.inc',
    'type' => MENU_NORMAL_ITEM,
  );
  
  $items['data/sheet/%/json'] = array(
    'title' => 'Data json (Sheet)',
    'description' => 'Return the json format data of the sheet.',
    'page callback' => 'dac_data_json',
    'page arguments' => array(1, 2),
    'access callback' => TRUE,
    'type' => MENU_CALLBACK,
  );

  return $items;
}

/**
 * Implements hook_init().
 */
function dac_init() {
  drupal_add_js('https://www.google.com/jsapi', 'external');
}

/**
 * @defgroup DAC Field.
 * @{
 */

/**
 * Implements hook_field_info().
 */
function dac_field_info() {
  $fields = array();
  
  $fields['dac_chart_type'] = array(
  	'label' => t('Chart Type'),
    'description' => t('Data and Chart: choose the specfic chart type of a chart system.'),
    'default_widget' => 'options_select',
    'default_formatter' => 'dac_none',
  );
  
  $fields['dac_chart_options'] = array(
    'label' => t('Chart Options'),
    'description' => t('Data and Chart: Configure a chart of a chart system.'),
    'default_widget' => 'dac_chart_options_pair',
    'default_formatter' => 'dac_none',
  );
  
  return $fields;
}

/**
 * Implements hook_field_widget_info_alter().
 */
function dac_field_widget_info_alter(&$info) {
  $info['options_select']['field types'][] = 'dac_chart_type';
}

/**
 * Implements hook_options_list().
 */
function dac_options_list($field, $instance, $entity_type, $entity) {
  // @todo Support different chart system. Use plugins system.
  $options = array(
    'PieChart' => t('Pie Chart'),
    'LineChart' => t('Line Chart'),
    'BarChart' => t('Bar Chart'),
    'ColumnChart' => t('Column Chart'),
    'Table' => t('Table'),
    'CandlestickChart' => t('Candlestick Chart'),
    'Map' => t('Map'),
    'OrgChart' => t('Organization Chart'),
  );
  
  return $options;
}

/**
 * Implements hook_field_is_empty().
 */
function dac_field_is_empty($item, $field) {
  switch ($field['type']) {
  	case 'dac_chart_type':
  	  if (empty($item['value']) && (string) $item['value'] !== '0') {
  	    return TRUE;
  	  }
  	  break;
  	case 'dac_chart_options':
  	  if (empty($item['value'])) {
  	    return TRUE;
  	  }
  	  break;
  }
  
  return FALSE;
}

/**
 * Implements hook_field_widget_info().
 */
function dac_field_widget_info() {
  $widgets = array();
  
  $widgets['dac_chart_options_textarea'] = array(
    'label' => t('Parameter/Value Textarea'),
    'description' => t('Data and Chart: chart options pair.'),
    'field types' => array('dac_chart_options'),
  );
  
  return $widgets;
}

/**
 * Implements hook_field_widget_form().
 */
function dac_field_widget_form(&$form, &$form_state, $field, $instance, $langcode, $items, $delta, $element) {
	if ($field['type'] == 'dac_chart_options') {
	  $default_value = '';
	  if (!empty($items[$delta]['value'])) {
		  $options_pair = unserialize($items[$delta]['value']);
		  $options = array();
		  foreach ($options_pair as $key => $value) {
		    $options[] = $key . ' = ' . $value;
		  }
		  $default_value = implode("\n", $options);
	  }
	  
	  $main_widget = $element + array(
	    '#type' => 'textarea',
	    '#rows' => 10,
	    '#description' => t('title, width, height, is3D.'),
	    '#default_value' => $default_value,
	  );
	  
	  $element['value'] = $main_widget;
	}
  
  return $element;
}

function dac_field_presave($entity_type, $entity, $field, $instance, $langcode, &$items) {
  
  if ($field['type'] == 'dac_chart_options' && !empty($items[0]['value'])) {
    // Each line as a pair of parameter and value.
	  $lines = array_filter(array_map('trim', explode("\n", $items[0]['value'])));
	  $options = array();	  
	  foreach ($lines as $line) {
	    if (preg_match('/(.*)\=(.*)/', $line, $matches)) {
	      $options[trim($matches[1])] = trim($matches[2]);
	    }
	  }	  
	  $items[0]['value'] = serialize($options);
  }
}

/**
 * Implements hook_field_formatter_info().
 */
function dac_field_formatter_info() {
  $formatters = array();
  
  $formatters['dac_none'] = array(
    'label' => t('None'),
    'field types' => array('dac_chart_type', 'dac_chart_options'),
  );
  
  return $formatters;
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function dac_form_field_ui_field_edit_form_alter(&$form, &$form_state, $form_id) {
	if ($form['#field']['type'] == 'dac_chart_options') {
		$form['field']['cardinality']['#value'] = 1;
		$form['field']['cardinality']['#disabled'] = TRUE;
		$form['field']['cardinality']['#description'] = t('<b>For this field type only 1 can be set.</b>');
	}
}

/**
 * Implements hook_field_formatter_view().
 */
/*
function dac_field_formatter_view($entity_type, $entity, $field, $instance, $langcode, $items, $display) {
  $element = array();
  
  switch ($display['type']) {
  	case 'dac_'
  }
}
*/

/**
 * @} End of "defgroup DAC Field".
 */

/**
 * Implements hook_entity_view().
 *
 * Provide chart preview on chart entity 'full' view_mode.
 */
function dac_entity_view($entity, $type, $view_mode, $langcode) {
  if ($type == 'chart'
    && $entity->bundle() == 'gct'
    && $view_mode == 'full'
  ) {
		$settings = dac_chart_settings($entity, $langcode);
    // Draw chart using $settings.
    $chart_info = dac_chart_draw($type . '_' . $entity->identifier(), $settings);
    $entity->content['chart_preview'] = array(
      '#markup' => $chart_info['markup'],
      '#weight' => 10,
    );
  }
}

/**
 * Return the json data.
 * 
 * @todo Cache.
 * 
 * @param string $type Bundle of the data entity.
 * @param int $id
 */
function dac_data_json($type, $id) {
  $entity = entity_load_single('data', $id);
  $data = array();
  
  if ($type == 'sheet') {
    $sheet = $entity->field_data_sheet[LANGUAGE_NONE][0]['value'];
    require_once(drupal_get_path('module', 'sheetnode') . '/socialcalc.inc');
    $sc = socialcalc_parse($sheet);
    foreach($sc['sheet']['cells'] as $pos => $cell) {
      // pos[0] as column, pos[1] as row.
      switch ($cell['valuetype']) {
        // Text.
      	case 't':
      	// Number.
      	case 'n':
      	  $data[$cell['pos'][1]-1][$cell['pos'][0]-1] = $cell['datavalue'];
      	  break;
      	// Date.
      	case 'nd':
      	  $data[$cell['pos'][1]-1][$cell['pos'][0]-1] = $cell['formula'];
      	  break;
      }
    }
  }
  
  drupal_json_output($data);
}

/**
 * Parse advanced chart options.
 *
 * @param array $chart_options
 */
function dac_chart_options_parse($chart_options) {

}

/**
 * Prepare the chart settings.
 */
function dac_chart_settings($entity, $langcode) {
  global $base_url;
  $data = entity_load_single('data', $entity->field_chart_data[LANGUAGE_NONE][0]['target_id']);
  $data_uri = $data->uri();
  $data_url = $base_url . '/' . $data_uri['path'] . '/json';
  // Prepare $settings.
  // json_source, json_table.
  $settings = array(
    'data' => array(
      'type' => 'json_source',
      //'table' => drupal_http_request($data_url)->data,
      'url' => $data_url,
    ),
    'chart' => array(
      'driver' => 'gct',
      'chartType' => $entity->field_chart_type[LANGUAGE_NONE][0]['value'],
      'options' => array(),
    ),
  );
  if (!empty($entity->field_chart_options)) {
    $settings['chart']['options'] = unserialize($entity->field_chart_options[LANGUAGE_NONE][0]['value']);
    if (!isset($settings['chart']['options']['title'])) {
      $settings['chart']['options']['title'] = $entity->title;
    }
  }
  
  return $settings;
}

/**
 * Draw the chart, return the HTML markup.
 */
function dac_chart_draw($id, $settings) {
  static $settings_dac = array();
  if (!isset($settings['containerId'])) {
    $settings['containerId'] = strtolower(str_replace(" ", "-", $id));
  }
  $settings_dac['dac'][$id] = $settings;

  drupal_add_js(drupal_get_path('module', 'dac') . '/dac.js');
  drupal_add_js($settings_dac, array('type' => 'setting'));
  
  $ret = array(
    'id' =>  $id,
    'weight' => isset($settings['weight']) ? $settings['weight'] : 0,
    'markup' =>  '<div id="' . $settings['containerId'] . '"></div>',
  );
  
  return $ret;
}

/**
 * Build the data/chart entity for dac.
 * @param string $entity_machine_name
 * @param string $bundle_machine_name
 */
function dac_entity_build($entity_machine_name, $bundle_machine_name) {
  dac_eck_entity_build($entity_machine_name);
  dac_eck_bundle_build($entity_machine_name, $bundle_machine_name);
  dac_fields_build($entity_machine_name, $bundle_machine_name);
}

/**
 * Add the eck entity.
 * @param string $entity_machine_name
 */
function dac_eck_entity_build($entity_machine_name) {
  module_load_include('inc', 'dac', 'dac.entity_info');
  $entity_info = array();
  foreach (dac_eck_entity_type_info() as $entity_name => $entity_type_info) {
    if ($entity_name == $entity_machine_name)
    {
      $entity_info = $entity_type_info;
    }
  }
  
  if (count($entity_info) == 0) {
    return;
  }
  
  // Try load the existing entity type, if one exists.
  $entity_type = EntityType::loadByName($entity_machine_name);
  // Only touch it if not exist.
  if (empty($entity_type->id)) {
    $entity_type = new EntityType();
    $entity_type->name = $entity_info['name'];
    $entity_type->label = $entity_info['label'];
    foreach ($entity_info['properties'] as $property_key => $property) {
      $entity_type->addProperty($property_key, $property['label'], $property['type'], $property['behavior']);
    }
    $entity_type->save();
  }
  
  drupal_get_schema(NULL, TRUE);
  entity_info_cache_clear();
  variable_set('menu_rebuild_needed', TRUE);
}

/**
 * Add an eck bundle to an eck entity.
 * @param string $entity_machine_name
 * @param string $bundle_machine_name
 */
function dac_eck_bundle_build($entity_machine_name, $bundle_machine_name) {
  module_load_include('inc', 'dac', 'dac.entity_info');
  $bundle_info = array();
  foreach (dac_eck_bundle_info() as $bundle_name => $bundle_info_tmp) {
    if (
      $bundle_info_tmp['entity_type'] == $entity_machine_name
      && $bundle_info_tmp['name'] == $bundle_machine_name
    ) {
      $bundle_info = $bundle_info_tmp; 
    }
  }
  
  if (count($bundle_info) == 0) {
    return;
  }
  
  $bundle = Bundle::loadByMachineName($bundle_machine_name);
  if (empty($bundle->id)) {
    $bundle = new Bundle();
  }
  foreach($bundle_info as $key => $value){
    $bundle->{$key} = $value;
  }
  $bundle->save();
  
  drupal_get_schema(NULL, TRUE);
  entity_info_cache_clear();
  variable_set('menu_rebuild_needed', TRUE);
}

/**
 * Build the fields of the bundle of entity.
 * @param string $entity_machine_name
 * @param string $bundle_machine_name
 * @param array $fields_name
 */
function dac_fields_build($entity_machine_name, $bundle_machine_name, $fields_name = array()) {
  module_load_include('inc', 'dac', 'dac.entity_info');
  $fields = array();
  foreach (dac_field_default_fields() as $field_name => $field) {
    if (
      strpos($field_name, "{$entity_machine_name}-{$bundle_machine_name}") !== FALSE
    	&& (count($fields_name) == 0 || in_array($field_name, $fields_name))
    )
    {
      $fields[$field_name] = $field;
    }
  }
  
  if (count($fields) == 0) {
    return;
  }

  field_info_cache_clear();
  
  // Load all the existing fields and instance up-front so that we don't
  // have to rebuild the cache all the time.
  $existing_fields = field_info_fields();
  $existing_instances = field_info_instances();
  
  foreach ($fields as $field) {
    // Create or update field.
    $field_config = $field['field_config'];
    if (isset($existing_fields[$field_config['field_name']])) {
      $existing_field = $existing_fields[$field_config['field_name']];
      if ($field_config + $existing_field != $existing_field) {
        field_update_field($field_config);
      }
    }
    else {
      field_create_field($field_config);
      $existing_fields[$field_config['field_name']] = $field_config;
    }
  
    // Create or update field instance.
    $field_instance = $field['field_instance'];
    if (isset($existing_instances[$field_instance['entity_type']][$field_instance['bundle']][$field_instance['field_name']])) {
      $existing_instance = $existing_instances[$field_instance['entity_type']][$field_instance['bundle']][$field_instance['field_name']];
      if ($field_instance + $existing_instance != $existing_instance) {
        field_update_instance($field_instance);
      }
    }
    else {
      field_create_instance($field_instance);
      $existing_instances[$field_instance['entity_type']][$field_instance['bundle']][$field_instance['field_name']] = $field_instance;
    }
  }
  
  if ($fields) {
    variable_set('menu_rebuild_needed', TRUE);
  }
}
